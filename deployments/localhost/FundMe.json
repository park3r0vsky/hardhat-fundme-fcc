{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "s_priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotEnoughFunds",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xde9584342ffc79be43865daad8104a23d65d148afc4a242c13f81a943b858a8b",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "961157",
        "logsBloom": "0x
        "blockHash": "0xc926c636b9b485f0688ef93a7cf2f7c920f4dc975bee7d74659ad615c55fdcad",
        "transactionHash": "0xde9584342ffc79be43865daad8104a23d65d148afc4a242c13f81a943b858a8b",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "961157",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "1a6932bcd0b46ce8b26fb900372db8a3",
    "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Patrick Collins\",\"details\":\"This impletments price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This impletments price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is demo\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__NotEnoughFunds();\\n\\n/** @title A contract for crowd funding\\n *  @author Patrick Collins\\n *  @notice This contract is demo\\n *  @dev This impletments price feeds as our library\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 5 * 10**18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This impletments price feeds as our library\\n     */\\n\\n    function fund() public payable {\\n        //require(\\n        //    msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n        //    \\\"You need to spend more ETH!\\\"\\n        //);\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD)\\n            revert FundMe__NotEnoughFunds();\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xa6150fee9d7a7f51f73b0980ce8c5730c65cd4747d647e72b66c25a25eef50b4\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x92db4e707db570dfacdf629443b6ccea2831b293c0307cf8c0b54ea4f94acfdb\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011833803806200118383398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051611003620001806000396000818161033801528181610586015281816105d601526107cc01526110036000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a81565b6102ee565b6040516100cc9190610ac7565b60405180910390f35b3480156100e157600080fd5b506100ea610336565b005b3480156100f857600080fd5b50610101610576565b60405161010e9190610ac7565b60405180910390f35b34801561012357600080fd5b5061012c610582565b6040516101399190610af1565b60405180910390f35b34801561014e57600080fd5b506101576105aa565b6040516101649190610b6b565b60405180910390f35b6101756101be565b005b61017f6105d4565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bb2565b610862565b6040516101b59190610af1565b60405180910390f35b674563918244f400006101fc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108aa90919063ffffffff16565b1015610234576040517f964742c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102829190610c0e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610466576000600182815481106103e1576103e0610c42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045e90610c71565b9150506103be565b50600067ffffffffffffffff81111561048257610481610cb9565b5b6040519080825280602002602001820160405280156104b05781602001602082028036833780820191505090505b50600190805190602001906104c6929190610977565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ed90610d19565b60006040518083038185875af1925050503d806000811461052a576040519150601f19603f3d011682016040523d82523d6000602084013e61052f565b606091505b5050905080610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90610d8b565b60405180910390fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106dd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610693575b5050505050905060005b815181101561076757600082828151811061070557610704610c42565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075f90610c71565b9150506106e7565b50600067ffffffffffffffff81111561078357610782610cb9565b5b6040519080825280602002602001820160405280156107b15781602001602082028036833780820191505090505b50600190805190602001906107c7929190610977565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080e90610d19565b60006040518083038185875af1925050503d806000811461084b576040519150601f19603f3d011682016040523d82523d6000602084013e610850565b606091505b505090508061085e57600080fd5b5050565b60006001828154811061087857610877610c42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108b6836108e6565b90506000670de0b6b3a764000085836108cf9190610dab565b6108d99190610e1c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190610eda565b5050509150506402540be4008161096f9190610f55565b915050919050565b8280548282559060005260206000209081019282156109f0579160200282015b828111156109ef5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610997565b5b5090506109fd9190610a01565b5090565b5b80821115610a1a576000816000905550600101610a02565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4e82610a23565b9050919050565b610a5e81610a43565b8114610a6957600080fd5b50565b600081359050610a7b81610a55565b92915050565b600060208284031215610a9757610a96610a1e565b5b6000610aa584828501610a6c565b91505092915050565b6000819050919050565b610ac181610aae565b82525050565b6000602082019050610adc6000830184610ab8565b92915050565b610aeb81610a43565b82525050565b6000602082019050610b066000830184610ae2565b92915050565b6000819050919050565b6000610b31610b2c610b2784610a23565b610b0c565b610a23565b9050919050565b6000610b4382610b16565b9050919050565b6000610b5582610b38565b9050919050565b610b6581610b4a565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b610b8f81610aae565b8114610b9a57600080fd5b50565b600081359050610bac81610b86565b92915050565b600060208284031215610bc857610bc7610a1e565b5b6000610bd684828501610b9d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1982610aae565b9150610c2483610aae565b9250828201905080821115610c3c57610c3b610bdf565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c7c82610aae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cae57610cad610bdf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d03600083610ce8565b9150610d0e82610cf3565b600082019050919050565b6000610d2482610cf6565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d75600b83610d2e565b9150610d8082610d3f565b602082019050919050565b60006020820190508181036000830152610da481610d68565b9050919050565b6000610db682610aae565b9150610dc183610aae565b9250828202610dcf81610aae565b91508282048414831517610de657610de5610bdf565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e2782610aae565b9150610e3283610aae565b925082610e4257610e41610ded565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e6c81610e4d565b8114610e7757600080fd5b50565b600081519050610e8981610e63565b92915050565b6000819050919050565b610ea281610e8f565b8114610ead57600080fd5b50565b600081519050610ebf81610e99565b92915050565b600081519050610ed481610b86565b92915050565b600080600080600060a08688031215610ef657610ef5610a1e565b5b6000610f0488828901610e7a565b9550506020610f1588828901610eb0565b9450506040610f2688828901610ec5565b9350506060610f3788828901610ec5565b9250506080610f4888828901610e7a565b9150509295509295909350565b6000610f6082610e8f565b9150610f6b83610e8f565b9250828202610f7981610e8f565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fb157610fb0610bdf565b5b8282058414831517610fc657610fc5610bdf565b5b509291505056fea264697066735822122009ea6aab3d67c3bef5c80f983480e786674c2f44c0d70d3bf1b55e7e29a2536064736f6c63430008110033",
    "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a81565b6102ee565b6040516100cc9190610ac7565b60405180910390f35b3480156100e157600080fd5b506100ea610336565b005b3480156100f857600080fd5b50610101610576565b60405161010e9190610ac7565b60405180910390f35b34801561012357600080fd5b5061012c610582565b6040516101399190610af1565b60405180910390f35b34801561014e57600080fd5b506101576105aa565b6040516101649190610b6b565b60405180910390f35b6101756101be565b005b61017f6105d4565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610bb2565b610862565b6040516101b59190610af1565b60405180910390f35b674563918244f400006101fc600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108aa90919063ffffffff16565b1015610234576040517f964742c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102829190610c0e565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bb576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610466576000600182815481106103e1576103e0610c42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061045e90610c71565b9150506103be565b50600067ffffffffffffffff81111561048257610481610cb9565b5b6040519080825280602002602001820160405280156104b05781602001602082028036833780820191505090505b50600190805190602001906104c6929190610977565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104ed90610d19565b60006040518083038185875af1925050503d806000811461052a576040519150601f19603f3d011682016040523d82523d6000602084013e61052f565b606091505b5050905080610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90610d8b565b60405180910390fd5b50565b674563918244f4000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610659576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106dd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610693575b5050505050905060005b815181101561076757600082828151811061070557610704610c42565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075f90610c71565b9150506106e7565b50600067ffffffffffffffff81111561078357610782610cb9565b5b6040519080825280602002602001820160405280156107b15781602001602082028036833780820191505090505b50600190805190602001906107c7929190610977565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080e90610d19565b60006040518083038185875af1925050503d806000811461084b576040519150601f19603f3d011682016040523d82523d6000602084013e610850565b606091505b505090508061085e57600080fd5b5050565b60006001828154811061087857610877610c42565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108b6836108e6565b90506000670de0b6b3a764000085836108cf9190610dab565b6108d99190610e1c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610934573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109589190610eda565b5050509150506402540be4008161096f9190610f55565b915050919050565b8280548282559060005260206000209081019282156109f0579160200282015b828111156109ef5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610997565b5b5090506109fd9190610a01565b5090565b5b80821115610a1a576000816000905550600101610a02565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4e82610a23565b9050919050565b610a5e81610a43565b8114610a6957600080fd5b50565b600081359050610a7b81610a55565b92915050565b600060208284031215610a9757610a96610a1e565b5b6000610aa584828501610a6c565b91505092915050565b6000819050919050565b610ac181610aae565b82525050565b6000602082019050610adc6000830184610ab8565b92915050565b610aeb81610a43565b82525050565b6000602082019050610b066000830184610ae2565b92915050565b6000819050919050565b6000610b31610b2c610b2784610a23565b610b0c565b610a23565b9050919050565b6000610b4382610b16565b9050919050565b6000610b5582610b38565b9050919050565b610b6581610b4a565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b610b8f81610aae565b8114610b9a57600080fd5b50565b600081359050610bac81610b86565b92915050565b600060208284031215610bc857610bc7610a1e565b5b6000610bd684828501610b9d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1982610aae565b9150610c2483610aae565b9250828201905080821115610c3c57610c3b610bdf565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c7c82610aae565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cae57610cad610bdf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d03600083610ce8565b9150610d0e82610cf3565b600082019050919050565b6000610d2482610cf6565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d75600b83610d2e565b9150610d8082610d3f565b602082019050919050565b60006020820190508181036000830152610da481610d68565b9050919050565b6000610db682610aae565b9150610dc183610aae565b9250828202610dcf81610aae565b91508282048414831517610de657610de5610bdf565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e2782610aae565b9150610e3283610aae565b925082610e4257610e41610ded565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e6c81610e4d565b8114610e7757600080fd5b50565b600081519050610e8981610e63565b92915050565b6000819050919050565b610ea281610e8f565b8114610ead57600080fd5b50565b600081519050610ebf81610e99565b92915050565b600081519050610ed481610b86565b92915050565b600080600080600060a08688031215610ef657610ef5610a1e565b5b6000610f0488828901610e7a565b9550506020610f1588828901610eb0565b9450506040610f2688828901610ec5565b9350506060610f3788828901610ec5565b9250506080610f4888828901610e7a565b9150509295509295909350565b6000610f6082610e8f565b9150610f6b83610e8f565b9250828202610f7981610e8f565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fb157610fb0610bdf565b5b8282058414831517610fc657610fc5610bdf565b5b509291505056fea264697066735822122009ea6aab3d67c3bef5c80f983480e786674c2f44c0d70d3bf1b55e7e29a2536064736f6c63430008110033",
    "devdoc": {
        "author": "Patrick Collins",
        "details": "This impletments price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This impletments price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is demo",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 61,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 64,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 76,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
